name: Release
permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  push:
    branches:
      - main
      - rc

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release > release-output.txt 2>&1 || true
        cat release-output.txt
        if grep -q "Published release" release-output.txt; then
          echo "released=true" >> $GITHUB_OUTPUT
          # Get the latest tag as version
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"
        else
          echo "released=false" >> $GITHUB_OUTPUT
          echo "No release published"
        fi

  build-binaries:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ needs.release.outputs.version }}
      run: |
        EXT=""
        if [ "$GOOS" = "windows" ]; then
          EXT=".exe"
        fi
        go build -ldflags="-s -w -X main.buildVersion=${VERSION} -X main.buildCommit=$(git rev-parse --short HEAD) -X main.buildTimestamp=$(date -u '+%Y-%m-%d_%H:%M:%S') -X github.com/jomadu/ai-rules-manager/internal/version.Version=${VERSION} -X github.com/jomadu/ai-rules-manager/internal/version.Commit=$(git rev-parse --short HEAD) -X github.com/jomadu/ai-rules-manager/internal/version.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" -o arm-${{ matrix.goos }}-${{ matrix.goarch }}$EXT ./cmd/arm

    - name: Create package
      run: |
        BINARY="arm-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY="${BINARY}.exe"
        fi
        tar -czf ${BINARY}.tar.gz ${BINARY}
        sha256sum ${BINARY} > ${BINARY}.sha256

    - name: Upload to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BINARY="arm-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY="${BINARY}.exe"
        fi
        gh release upload v${{ needs.release.outputs.version }} ${BINARY}.tar.gz ${BINARY}.sha256
