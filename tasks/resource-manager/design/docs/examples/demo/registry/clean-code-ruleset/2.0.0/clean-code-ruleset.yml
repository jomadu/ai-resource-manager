apiVersion: v1
kind: Ruleset
metadata:
    id: "cleanCode"
    name: "Clean Code Principles"
    description: "Essential clean code principles for maintainable software - Major refactor with enhanced rules"
spec:
    rules:
        useMeaningfulNames:
            name: "Use Meaningful Names"
            description: "Choose names that reveal intent and are easy to understand"
            priority: 100
            enforcement: must
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Use intention-revealing names. Avoid disinformation, make meaningful distinctions, use pronounceable names, and use searchable names. A name should tell you why it exists, what it does, and how it is used.

                Good: `userAccountBalance`, `isValidEmail`, `calculateTotalPrice`
                Bad: `data`, `temp`, `x`, `flag`

                BREAKING CHANGE: This rule now applies to additional languages (Rust, C++, C).
        keepFunctionsSmall:
            name: "Keep Functions Small"
            description: "Functions should do one thing and do it well"
            priority: 95
            enforcement: must
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Functions should be small and do only one thing. They should fit on a screen and have a single level of abstraction. If you need to add comments to explain what a function does, it's probably too long.

                - Aim for functions under 15 lines (reduced from 20)
                - One level of abstraction per function
                - Use descriptive names that eliminate the need for comments

                BREAKING CHANGE: Function length limit reduced from 20 to 15 lines.
        writeSelfDocumentingCode:
            name: "Write Self-Documenting Code"
            description: "Write code that explains itself without needing comments"
            priority: 85
            enforcement: must
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Code should be self-explanatory. If you need a comment to explain what your code does, rewrite the code to be clearer. Good code documents itself through clear naming and structure.

                Exceptions: Legal comments, TODO comments, warnings, and public API documentation.

                BREAKING CHANGE: Rule renamed from "Don't Comment Bad Code" and enforcement changed from SHOULD to MUST.
        singleResponsibilityPrinciple:
            name: "Single Responsibility Principle"
            description: "A class should have only one reason to change"
            priority: 90
            enforcement: must
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Every class should have a single responsibility. If a class has multiple reasons to change, it violates the Single Responsibility Principle and should be refactored into smaller, focused classes.

                Signs of violation:
                - Multiple responsibilities in one class
                - Classes that are hard to test
                - Classes that are hard to understand

                BREAKING CHANGE: Enforcement changed from SHOULD to MUST.
        eliminateDuplication:
            name: "Eliminate Duplication (DRY)"
            description: "Every piece of knowledge should have a single representation"
            priority: 80
            enforcement: should
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Duplication is the root of all evil in software design. When you find yourself copying and pasting code, extract it into a function, class, or module that can be reused.

                Types of duplication to avoid:
                - Copy-paste code
                - Similar logic in different places
                - Repeated configuration
                - Duplicate data structures

                BREAKING CHANGE: Rule renamed from "Don't Repeat Yourself (DRY)" and enforcement changed from MAY to SHOULD.
        consistentCodeStyle:
            name: "Consistent Code Style"
            description: "Use consistent formatting and style throughout your codebase"
            priority: 75
            enforcement: must
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Consistent formatting makes code easier to read and maintain. Use automated formatting tools and establish team-wide style guidelines.

                - Use linters and formatters (ESLint, Prettier, Black, gofmt, rustfmt)
                - Configure your IDE for consistent formatting
                - Establish coding standards for your team
                - Use pre-commit hooks to enforce formatting

                BREAKING CHANGE: Enforcement changed from SHOULD to MUST.
        robustErrorHandling:
            name: "Robust Error Handling"
            description: "Handle errors gracefully and provide meaningful error messages"
            priority: 90
            enforcement: must
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Error handling is crucial for robust applications. Always handle errors explicitly and provide meaningful error messages to help with debugging.

                - Use try-catch blocks appropriately
                - Don't ignore errors silently
                - Provide context in error messages
                - Log errors with sufficient detail
                - Use specific exception types when possible

                BREAKING CHANGE: Rule renamed from "Proper Error Handling" and priority increased from 85 to 90.
        writeComprehensiveTests:
            name: "Write Comprehensive Tests"
            description: "Write tests that cover your code thoroughly and test behavior, not implementation"
            priority: 85
            enforcement: must
            scope:
                - files: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.go", "**/*.rs", "**/*.cpp", "**/*.c"]
            body: |
                Tests are essential for maintaining code quality and preventing regressions. Write tests that verify behavior, not implementation details.

                - Aim for high test coverage (80%+)
                - Test edge cases and error conditions
                - Use descriptive test names
                - Keep tests simple and focused
                - Test behavior, not implementation

                NEW RULE: Added in v2.0.0
